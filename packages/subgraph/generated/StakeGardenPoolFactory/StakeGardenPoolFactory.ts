// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get controller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get weights(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class StakeGardenPoolFactory extends ethereum.SmartContract {
  static bind(address: Address): StakeGardenPoolFactory {
    return new StakeGardenPoolFactory("StakeGardenPoolFactory", address);
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createPool(
    stakeTokens: Array<Address>,
    weights: Array<BigInt>,
    name: string,
    symbol: string
  ): Address {
    let result = super.call(
      "createPool",
      "createPool(address[],uint256[],string,string):(address)",
      [
        ethereum.Value.fromAddressArray(stakeTokens),
        ethereum.Value.fromUnsignedBigIntArray(weights),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol)
      ]
    );

    return result[0].toAddress();
  }

  try_createPool(
    stakeTokens: Array<Address>,
    weights: Array<BigInt>,
    name: string,
    symbol: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPool",
      "createPool(address[],uint256[],string,string):(address)",
      [
        ethereum.Value.fromAddressArray(stakeTokens),
        ethereum.Value.fromUnsignedBigIntArray(weights),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isPool(_pool: Address): boolean {
    let result = super.call("isPool", "isPool(address):(bool)", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBoolean();
  }

  try_isPool(_pool: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPool", "isPool(address):(bool)", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolMapping(param0: Address): boolean {
    let result = super.call("poolMapping", "poolMapping(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_poolMapping(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("poolMapping", "poolMapping(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pools(param0: BigInt): Address {
    let result = super.call("pools", "pools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_pools(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("pools", "pools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get stakeTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get weights(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
